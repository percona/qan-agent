
* Alias services

#+begin-block: alias services
+alias.services+

.. list-table::
   :widths: 25 75
   :header-rows: 1

   * - Alias
     - Services

   * - |opt.linux-metrics|
     - General system metrics monitoring service

   * - |opt.mysql-metrics|
     - |mysql| metrics monitoring service

   * - |opt.mysql-queries|
     - |mysql| query analytics service

   * - |opt.mongodb-metrics|
     - |mongodb| metrics monitoring service

   * - |opt.mongodb-queries|
     - |mongodb| query analytics service

   * - |opt.proxysql-metrics|
     - |proxysql| metrics monitoring service

   * - |opt.mysql|
     - Complete |mysql| instance monitoring:

       * |opt.linux-metrics|
       * |opt.mysql-metrics|
       * |opt.mysql-queries|

   * - |opt.mongodb|
     - Complete |mongodb| instance monitoring:

       * |opt.linux-metrics|
       * |opt.mongodb-metrics|
       * |opt.mongodb-queries|

#+end-block

* Dashboards

** MongoDB Overview
n
#+begin-block:: dashboard mongodb-overview
+dashboard.mongodb-overview+

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Name
     - Description

   * - Command Operations
     - Shows how many times a command is executed per second on average
       during the selected interval.

       Look for peaks and drops and correlate them with other graphs.

   * - Connections
     - Keep in mind the hard limit on the maximum number of connections
       set by your distribution.

       Anything over 5,000 should be a concern,
       because the application may not close connections correctly.

   * - Cursors
     - Helps identify why connections are increasing.
       Shows active cursors compared to cursors being automatically killed
       after 10 minutes due to an application not closing the connection.

   * - Document Operations
     - When used in combination with **Command Operations**,
       this graph can help identify *write aplification*.
       For example, when one ``insert`` or ``update`` command
       actually inserts or updates hundreds, thousands,
       or even millions of documents.

   * - Queued Operations
     - Any number of queued operations for long periods of time
       is an indication of possible issues.
       Find the cause and fix it before requests get stuck in the queue.

   * - getLastError Write Time, getLastError Write Operations
     - This is useful for write-heavy workloads
       to understand how long it takes to verify writes
       and how many concurrent writes are occurring.

   * - Asserts
     - Asserts are not important by themselves,
       but you can correlate spikes with other graphs.

   * - Memory Faults
     - Memory faults indicate that requests are processed from disk
       either because an index is missing
       or there is not enough memory for the data set.
       Consider increasing memory or sharding out.

#+end-block

** MongoDB ReplSet

#+begin-block:: dashboard mongodb-replset
+dashboard.mongodb-replset+

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Metric
     - Description

   * - ReplSet State
     - Shows the role of the selected member instance
       (PRIMARY or SECONDARY)
   * - ReplSet Members
     - Shows the number of members in the replica set
   * - ReplSet Last Election
     - Shows how long ago the last election occurred
   * - ReplSet Lag
     - Shows the current replication lag for the selected member
   * - Storage Engine
     - Shows the storage engine used on the instance
   * - Oplog Insert Time
     - Shows how long it takes to write to the oplog.
       Without it the write will not be successful.

       This is more useful in mixed replica sets
       (where instances run different storage engines).
   * - Oplog Recovery Window
     - Shows the time range in the oplog
       and the oldest backed up operation.

       For example, if you take backups every 24 hours,
       each one should contain at least 36 hours of backed up operations,
       giving you 12 hours of restore window.
   * - Replication Lag
     - Shows the delay between an operation occurring on the primary
       and that same operation getting applied on the selected member
   * - Elections
     - Elections happen when a primary becomes unavailable.
       Look at this graph over longer periods (weeks or months)
       to determine patterns and correlate elections with other events.
   * - Member State Uptime
     - Shows how long various members were in PRIMARY and SECONDARY roles
   * - Max Heartbeat Time
     - Shows the heartbeat return times sent by the current member
       to other members in the replica set.

       Long heartbeat times can indicate network issues
       or that the server is too busy.
   * - Max Member Ping Time
     - This can show a correlation with the replication lag value

#+end-block

** MySQL Overview

#+begin-block: dashboard mysql-overview
+dashboard.mysql-overview+

.. list-table::
   :header-rows: 1
   :widths: 25 75

   * - Metric
     - Description

   * - MySQL Uptime
     - The amount of time since the MySQL server process was started.

   * - Current QPS
     - Based on the queries reported by MySQL's |sql.show-status| command, this metric shows the number of queries executed by the server during the last second.n
       This metric includes statements executed within stored programs.

       This variable does not include the following commands:

       * ``COM_PING``
       * ``COM_STATISTICS``
	 
       .. seealso::

          MySQL Server Status Variables: Queries
             https://dev.mysql.com/doc/refman/5.6/en/server-status-variables.html#statvar_Queries
          

   * - InnoDB Buffer Pool Size
     - Absolute value of the InnoDB buffer pool used for caching data and
       indexes in memory.  

       The goal is to keep the working set in memory. In most cases, this should
       be between 60%-90% of available memory on a dedicated database host, but
       depends on many factors.

   * - Buffer Pool Size % of Total RAM
     - The ratio between InnoDB buffer pool size and total memory.  In most
       cases, the InnoDB buffer pool should be between 60% and 90% of available
       memory on a dedicated database host, but it depends on many factors.

   * - MySQL Connections
     - **Max Connections** is the maximum permitted number
       of simultaneous client connections.
       This is the value of the ``max_connections`` variable.

       **Max Used Connections** is the maximum number of connections
       that have been in use simultaneously since the server was started.

       **Connections** is the number of connection attempts
       (successful or not) to the MySQL server.

       .. seealso::

	  |mysql| Server status variables: max_connections
	      https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_max_connections

   * - MySQL Active Threads
     - **Threads Connected** is the number of open connections.

       **Threads Running** is the number of threads not sleeping.

   * - MySQL Questions
     - The number of queries sent to the server by clients,
       *excluding those executed within stored programs*.

       This variable does not count the following commands:

       * ``COM_PING``
       * ``COM_STATISTICS``
       * ``COM_STMT_PREPARE``
       * ``COM_STMT_CLOSE``
       * ``COM_STMT_RESET``

   * - MySQL Thread Cache
     - The thread_cache_size metric informs how many threads the server should
       cache to reuse. When a client disconnects, the client's threads are put
       in the cache if the cache is not full. It is autosized in |mysql| 5.6.8 and
       above (capped to 100).

       Requests for threads are satisfied by reusing threads taken from the
       cache if possible, and only when the cache is empty is a new thread
       created.

       - Threads_created: The number of threads created to handle connections.
       - Threads_cached: The number of threads in the thread cache.

       .. seealso::

	  |mysql| Server status variables: thread_cache_size
	      https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_thread_cache_size

   * - MySQL Select Types
     - As with most relational databases, selecting based on indexes is more
       efficient than scanning the data of an entire table. Here, we see the counters
       for selects not done with indexes.

       - *Select Scan* is how many queries caused full table scans, in which all
         the data in the table had to be read and either discarded or returned.
       - *Select Range* is how many queries used a range scan, which means MySQL
         scanned all rows in a given range.
       - *Select Full Join* is the number of joins that are not joined on an
         index, this is usually a huge performance hit.

   * - MySQL Sorts
     - Due to a query's structure, order, or other requirements, MySQL sorts the
       rows before returning them. For example, if a table is ordered 1 to 10
       but you want the results reversed, MySQL then has to sort the rows to
       return 10 to 1.

       This graph also shows when sorts had to scan a whole table or a given
       range of a table in order to return the results and which could not have
       been sorted via an index.

   * - MySQL Slow Queries
     - Slow queries are defined as queries being slower than the *long_query_time*
       setting. For example, if you have *long_query_time* set to 3, all queries
       that take longer than 3 seconds to complete will show on this graph.

   * - Aborted Connections
     - When a given host connects to |mysql| and the connection is interrupted in
       the middle (for example due to bad credentials), |mysql| keeps that info in
       a system table (since 5.6 this table is exposed in performance_schema).

       If the amount of failed requests without a successful connection reaches
       the value of *max_connect_errors*, |mysqld| assumes that something is
       wrong and blocks the host from further connections.

       To allow connections from that host again, you need to issue the
       |sql.flush-hosts| statement.

   * - Table Locks
     - |mysql| takes a number of different locks for varying reasons. In this
       graph we see how many Table level locks |mysql| has requested from the
       storage engine. In the case of InnoDB, many times the locks could
       actually be row locks as it only takes table level locks in a few
       specific cases.

       It is most useful to compare *Locks Immediate* and *Locks Waited*. If
       *Locks waited* is rising, it means you have lock contention. Otherwise,
       *Locks Immediate* rising and falling is normal activity.

   * - |mysql| Network Traffic
     - This metric shows how much network traffic is generated by
       |mysql|. *Outbound* is network traffic sent from |mysql| and *Inbound* is
       the network traffic that |mysql| has received.

   * - |mysql| Network Usage Hourly
     - This metric shows how much network traffic is generated by |mysql| per
       hour. You can use the bar graph to compare data sent by |mysql| and data
       received by |mysql|.

   * - |mysql| Internal Memory Overview
     - This metric shows the various uses of memory within |mysql|.

       System Memory

          Total Memory for the system.

       |innodb| Buffer Pool Data

          |innodb| maintains a storage area called the buffer pool for caching
          data and indexes in memory. Knowing how the |innodb| buffer pool works,
          and taking advantage of it to keep frequently accessed data in memory,
          is an important aspect of |mysql| tuning.

       |tokudb| Cache Size

          Similar in function to the |innodb| Buffer Pool, |tokudb| will allocate
          50% of the installed RAM for its own cache. While this is optimal in
          most situations, there are cases where it may lead to memory over
          allocation. If the system tries to allocate more memory than is
          available, the machine will begin swapping and run much slower than
          normal.

       Key Buffer Size

          Index blocks for |myisam| tables are buffered and are shared by
          all threads. *key_buffer_size* is the size of the buffer used for index
          blocks. The key buffer is also known as the *key cache*.

       Adaptive Hash Index Size

          The |innodb| storage engine has a special feature called adaptive hash
          indexes. When InnoDB notices that some index values are being accessed
          very frequently, it builds a hash index for them in memory on top of
          B-Tree indexes. This allows for very fast hashed lookups.

       Query Cache Size
       
          The query cache stores the text of a |sql.select| statement together
          with the corresponding result that was sent to the client. The query
          cache has huge scalability problems in that only one thread can do an
          operation in the query cache at the same time. This serialization is
          true for |sql.select| and also for |sql.insert|, |sql.update|, and
          |sql.delete|. This also means that the larger the *query_cache_size* is
          set to, the slower those operations become.

       |innodb| Dictionary Size

          The data dictionary is |innodb| internal catalog of tables. |innodb|
          stores the data dictionary on disk, and loads entries into memory
          while the server is running. This is somewhat analogous to table cache
          of |mysql|, but instead of operating at the server level, it is
          internal to the |innodb| storage engine.

       |innodb| Log Buffer Size

          The |mysql| |innodb| log buffer allows transactions to run without
          having to write the log to disk before the transactions commit. The
          size of this buffer is configured with the *innodb_log_buffer_size*
          variable.

   * - Top Command Counters and Top Command Counters Hourly
     - See https://dev.mysql.com/doc/refman/5.7/en/server-status-variables.html#statvar_Com_xxx
	 
   * - |mysql| Handlers
     - Handler statistics are internal statistics on how |mysql| is selecting,
       updating, inserting, and modifying rows, tables, and indexes.

       This is in fact the layer between the Storage Engine and |mysql|.

       - *read_rnd_next* is incremented when the server performs a full table
         scan and this is a counter you don't really want to see with a high
         value.
       - *read_key* is incremented when a read is done with an index.
       - *read_next* is incremented when the storage engine is asked to 'read
         the next index entry'. A high value means a lot of index scans are
         being done.

   * - |mysql| Query Cache Memory and |mysql| Query Cache Activity
     - The query cache has huge scalability problems in that only one thread
       can do an operation in the query cache at the same time. This
       serialization is true not only for |sql.select|, but also for
       |sql.insert|, |sql.update|, and |sql.delete|.

       This also means that the larger the `query_cache_size` is set to, the
       slower those operations become. In concurrent environments, the |mysql|
       Query Cache quickly becomes a contention point, decreasing
       performance. |mariadb| and |amazon-aurora| have done work to try and
       eliminate the query cache contention in their flavors of |mysql|, while
       |mysql| 8.0 has eliminated the query cache feature.

       The recommended settings for most environments is to set:

       .. code-block:: sql

	  query_cache_type=0
	  query_cache_size=0

       .. note::

	  While you can dynamically change these values, to completely remove
	  the contention point you have to restart the database.

   * - |mysql| Open Tables, |mysql| Table Open Cache Status, and |mysql| Table Definition Cache
     - The recommendation is to set the `table_open_cache_instances` to a loose
       correlation to virtual CPUs, keeping in mind that more instances means
       the cache is split more times. If you have a cache set to 500 but it has
       10 instances, each cache will only have 50 cached.

       The `table_definition_cache` and `table_open_cache` can be left as
       default as they are autosized |mysql| 5.6 and above (ie: do not set them
       to any value).

       .. seealso::
	   
	  |mysql| Server System Variables: table_open_cache
	     http://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_table_open_cache

#+end-block

** MySQL Query Response Time

#+begin-block:: dashboard mysql-query-response-time
+dashboard.mysql-query-response-time+

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Metric
     - Description

   * - Average Query Response Time
     - The Average Query Response Time graph shows information collected using
       the Response Time Distribution plugin sourced from table
       *INFORMATION_SCHEMA.QUERY_RESPONSE_TIME*. It computes this value across all
       queries by taking the sum of seconds divided by the count of seconds.

       .. seealso::

	  |percona| Server Documentation: QUERY_RESPONSE_TIME table
	     https://www.percona.com/doc/percona-server/5.7/diagnostics/response_time_distribution.html#QUERY_RESPONSE_TIME

   * - Query Response Time Distribution
     - Shows how many fast, neutral, and slow queries are executed per second.

       Query response time counts (operations) are grouped into three buckets:

       - 100ms - 1s
       - 1s - 10s
       - > 10s

   * - Average Query Response Time
       (Read/Write Split)
     - Available only in |percona| Server for |mysql|, this metric provides
       visibility of the split of READ vs WRITE query response time.

       .. seealso::

	  |percona| Server Documentation: Logging queries in separate READ and WRITE tables
	     https://www.percona.com/doc/percona-server/5.7/diagnostics/response_time_distribution.html#logging-the-queries-in-separate-read-and-write-tables
	  |percona| Server Documentation: QUERY_RESPONSE_TIME_READ
	     https://www.percona.com/doc/percona-server/5.7/diagnostics/response_time_distribution.html#QUERY_RESPONSE_TIME_READ
	  |percona| Server Documentation: QUERY_RESPONSE_TIME_WRITE
	     https://www.percona.com/doc/percona-server/5.7/diagnostics/response_time_distribution.html#QUERY_RESPONSE_TIME_WRITE

   * - Read Query Response Time Distribution
     - Available only in Percona Server for MySQL, illustrates READ query response time counts (operations) grouped into three buckets:

       - 100ms - 1s
       - 1s - 10s
       - > 10s

       .. seealso::

	  |percona| Server Documentation: QUERY_RESPONSE_TIME_READ
	     https://www.percona.com/doc/percona-server/5.7/diagnostics/response_time_distribution.html#QUERY_RESPONSE_TIME_READ

   * - Write Query Response Time Distribution
     - Available only in Percona Server for MySQL, illustrates WRITE query response time counts (operations) grouped into three buckets:

       - 100ms - 1s
       - 1s - 10s
       - > 10s

       .. seealso::

	  |percona| Server Documentation: QUERY_RESPONSE_TIME_WRITE
	     https://www.percona.com/doc/percona-server/5.7/diagnostics/response_time_distribution.html#QUERY_RESPONSE_TIME_WRITE


#+end-block

** MySQL InnoDB Metrics

#+begin-block:: dashboard mysql-innodb-metrics
+dashboard.mysql-innodb-metrics+

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Metric
     - Description

   * - InnoDB Checkpoint Age
     - The maximum checkpoint age is determined by the total length of all
       transaction log files (`innodb_log_file_size`).

       When the checkpoint age reaches the maximum checkpoint age, blocks are
       flushed syncronously. The rules of the thumb is to keep one hour of
       traffic in those logs and let the checkpointing perform its work as
       smooth as possible. If you don't do this, InnoDB will do synchronous
       flushing at the worst possible time, ie when you are busiest.

   * - |innodb| Transactions
     - |innodb| is an MVCC storage engine, which means you can start a transaction
       and continue to see a consistent snapshot even as the data changes. This is
       implemented by keeping old versions of rows as they are modified.

       The *InnoDB History List* is the undo logs which are used to store these
       modifications. They are a fundamental part of the |innodb| transactional
       architecture.

       If the history length is rising regularly, do not let open connections linger
       for a long period as this can affect the performance of |innodb|
       considerably. It is also a good idea to look for long running queries in |qan|.

   * - |innodb| Row Operations
     - This metric allows you to see which operations occur and the number of
       rows affected per operation. A metric like *Queries Per Second* will give
       you an idea of queries, but one query could effect millions of rows.
       
   * - |innodb| Row Lock Time
     - When data is locked, then that means that another session can NOT update
       that data until the lock is released (which unlocks the data and allows
       other users to update that data. Locks are usually released by either a
       |sql.rollback| or |sql.commit| SQL statement.

       |innodb| implements standard row-level locking where there are two types
       of locks, shared (S) locks and exclusive (X) locks.

       A shared (S) lock permits the transaction that holds the lock to read a
       row.  An exclusive (X) lock permits the transaction that holds the lock
       to update or delete a row.  *Average Row Lock Wait Time* is the row lock
       wait time divided by the number of row locks.

       *Row Lock Waits* indicates how many times a transaction waited on a row
       lock per second.

       *Row Lock Wait Load* is a rolling *5* minute average of *Row Lock Waits*.

       .. seealso::

	  |mysql| Server Documentation: Shared lock
	     https://dev.mysql.com/doc/refman/5.7/en/glossary.html#glos_shared_lock
	  |mysql| Server Documentation: Exclusive lock
	     https://dev.mysql.com/doc/refman/5.7/en/glossary.html#glos_exclusive_lock
	  |mysql| Server Documentation: |innodb| locking
             https://dev.mysql.com/doc/refman/5.7/en/innodb-locking.html

   * - |innodb| I/O
     - This metric has the following series:

       - *Data Writes* is the total number of InnoDB data writes. 
       - *Data Reads* is the total number of InnoDB data reads (OS file reads). 
       - *Log Writes* is the number of physical writes to the InnoDB redo log file. 
       - *Data Fsyncs* is the number of fsync() operations. The frequency of
         fsync() calls is influenced by the setting of the innodb_flush_method
         configuration option.

   * - |innodb| Log File Usage Hourly
     - Along with the buffer pool size, `innodb_log_file_size` is the most
       important setting when we are working with InnoDB. This graph shows how
       much data was written to InnoDB's redo logs over each hour. When the
       InnoDB log files are full, InnoDB needs to flush the modified pages from
       memory to disk.

       The rules of the thumb is to keep one hour of traffic in those logs and
       let the checkpointing perform its work as smooth as possible. If you
       don't do this, InnoDB will do synchronous flushing at the worst possible
       time, ie when you are busiest.

       This graph can help guide you in setting the correct `innodb_log_file_size`.

       .. seealso::

	  |percona| Database Performance Blog: Calculating a good |innodb| log file size
             https://www.percona.com/blog/2008/11/21/how-to-calculate-a-good-innodb-log-file-size/
	  |percona| Server Documentation: Improved |innodb| I/O scalability
	     http://www.percona.com/doc/percona-server/5.5/scalability/innodb_io_55.html#innodb_log_file_size

   * - InnoDB Deadlocks
     - A deadlock in |mysql| happens when two or more transactions mutually hold
       and request for locks, creating a cycle of dependencies. In a transaction
       system, deadlocks are a fact of life and not completely avoidable. InnoDB
       automatically detects transaction deadlocks, rollbacks a transaction
       immediately and returns an error.

       .. seealso::

	  |percona| Database Performance Blog: Dealing with |mysql| deadlocks
             https://www.percona.com/blog/2014/10/28/how-to-deal-with-mysql-deadlocks/
	 
#+end-block

** Cross Server Graphs

#+begin-block: dashboard cross-server-graphs
+dashboard.cross-server-graphs+

.. list-table::
   :header-rows: 1
   :widths: 25 75

   * - Metric
     - Description
   * - Load Average
     - *System load averages* is the average number of processes that are either
       in a runnable or uninterruptable state.  A process in a runnable state is
       either using the CPU or waiting to use the CPU.  A process in
       uninterruptable state is waiting for some I/O access, eg waiting for
       disk.

       This chart is best used for trends. If you notice the load average
       rising, it may be due to innefficient queries. In that case, you may
       further analyze your queries in term:`QAN`.

       .. seealso::

	  Description of *load average* in the man page of the |uptime| command in Debian
	     https://manpages.debian.org/stretch/procps/uptime.1.en.html

   * - MySQL Queries
     - Based on the queries reported by MySQL's *SHOW STATUS* command, this metric shows 
       the average number of statements executed by the server. This variable
       includes statements executed within stored programs, unlike the *Questions*
       variable. It does not count *COM_PING* or *COM_STATISTICS* commands.

       .. seealso::

	  MySQL Server Status Variables: Queries
	     https://dev.mysql.com/doc/refman/5.6/en/server-status-variables.html#statvar_Queries

   * - MySQL Traffic
     - Network traffic used by the MySQL process.

#+end-block

* Exporters

** rds_exporter

#+begin-block:: exporter rds metrics
+exporter.rds.metrics+

.. list-table::
   :header-rows: 1
   :widths: 40 40 10 10

   * - rds_exporter Metric
     - |amazon-cloudwatch| Metric
     - Units
     - Type of Metric
   * - aws_rds_bin_log_disk_usage_average
     - BinLogDiskUsage
     - Bytes
     - Basic
   * - aws_rds_cpu_credit_balance_average
     - CPUCreditBalance
     - Credits (vCPU-minutes)
     - Basic       
   * - aws_rds_cpu_credit_usage_average
     - CPUCreditUsage
     - Credits (vCPU-minutes)
     - Basic       
   * - aws_rds_database_connections_average
     - DatabaseConnections
     - Count
     - Basic       
   * - aws_rds_disk_queue_depth_average
     - DiskQueueDepth
     - Count
     - Basic       
   * - aws_rds_network_receive_throughput_average
     - NetworkReceiveThroughput
     - Bytes per second
     - Basic       
   * - aws_rds_network_transmit_throughput_average
     - NetworkTransmitThroughput
     - Bytes per second
     - Basic       
   * - aws_rds_read_iops_average
     - ReadIOPS
     - Count per second
     - Basic       
   * - aws_rds_read_latency_average
     - ReadLatency
     - Seconds
     - Basic       
   * - aws_rds_read_throughput_average
     - ReadThroughput
     - Bytes per second
     - Basic       
   * - aws_rds_swap_usage_average
     - SwapUsage
     - Bytes
     - Basic       
   * - aws_rds_write_iops_average
     - WriteIOPS
     - Count per second
     - Basic       
   * - aws_rds_write_latency_average
     - WriteLatency
     - Seconds
     - Basic       
   * - aws_rds_write_throughput_average
     - WriteThroughput
     - Bytes per second
     - Basic       
   * - node_cpu_average
     - CPUUtilization
     - Percentage
     - Enhanced
   * - node_filesystem_free
     - FreeStorageSpace
     - Bytes
     - Enhanced       
   * - node_memory_Cached
     - FreeableMemory
     - Bytes
     - Enhanced       
   * - rds_exporter_erroneous_requests
     - No corresponding |amazon-cloudwatch| metric. The number of erroneous API
       requests made to CloudWatch.
     - Count
     - Enhanced       
   * - rds_exporter_requests_total
     - No corresponding |amazon-cloudwatch| metric. API requests made to
       |amazon-cloudwatch|
     - Count
     - Enhanced       
   * - rds_exporter_scrape_duration_seconds
     - No corresponding |amazon-cloudwatch| metric. The time that the current
       RDS scrape took.
     - Seconds
     - Enhanced       
   * - rds_latency
     - No corresponding |amazon-cloudwatch| metric. The difference between the
       current time and timestamp in the metric itself.
     - Seconds
     - Enhanced       
   * - node_cp_average
     - CPUUtilization
     - Percentage
     - Enhanced       
   * - node_load1
     - No corresponding |amazon-cloudwatch| metric. The number of processes
       requesting CPU time over the last minute.
     - Count
     - Enhanced       
   * - node_memory_Active
     - No corresponding |amazon-cloudwatch| metric. The amount of assigned memory.
     - Kilobytes
     - Enhanced       
   * - node_memory_Buffers
     - No corresponding |amazon-cloudwatch| metric. The amount of memory used
       for buffering I/O requests prior to writing to the storage device
     - Kilobytes
     - Enhanced       
   * - node_memory_Cached
     - No corresponding |amazon-cloudwatch| metric. The amount of memory used
       for caching file system–based I/O.
     - Kilobytes
     - Enhanced       
   * - node_memory_Inactive
     - No corresponding |amazon-cloudwatch| metric. The amount of
       least-frequently used memory pages.
     - Kilobytes
     - Enhanced       
   * - node_memory_Mapped
     - No corresponding |amazon-cloudwatch| metric. The total amount of
       file-system contents that is memory mapped inside a process address space.
     - Kilobytes
     - Enhanced       
   * - node_memory_MemFree
     - No corresponding |amazon-cloudwatch| metric. The amount of unassigned
       memory.
     - Kilobytes
     - Enhanced       
   * - node_memory_MemTotal
     - No corresponding |amazon-cloudwatch| metric. The total amount of memory.
     - Kilobytes
     - Enhanced       
   * - node_memory_PageTables
     - No corresponding |amazon-cloudwatch| metric. The amount of memory used by page tables
     - Kilobytes
     - Enhanced       
   * - node_memory_Slab
     - The amount of reusable kernel data structures
     - Kilobytes
     - Enhanced       
   * - node_memory_SwapFree
     - No corresponding |amazon-cloudwatch| metric. The total amount of swap memory free.
     - Kilobytes
     - Enhanced       
   * - node_memory_SwapTotal
     - No corresponding |amazon-cloudwatch| metric. The total amount of swap memory available.
     - Kilobytes
     - Enhanced       
   * - node_memory_nr_dirty 
     - No corresponding |amazon-cloudwatch| metric. The amount of memory pages
       in RAM that have been modified but not written to their related data
       block in storage,
     - Kilobytes
     - Enhanced       
   * - node_procs_blocked
     - No corresponding |amazon-cloudwatch| metric. The number of tasks that are blocked.
     - Count
     - Enhanced       
   * - node_procs_running.
     - No corresponding |amazon-cloudwatch| metric.The number of tasks that are running.
     - Count
     - Enhanced       
   * - node_vmstat_pswpin
     - No corresponding |amazon-cloudwatch| metric. The number of kilobytes the system has swapped in from disk per second (disk
       reads).
     - Kilobytes
     - Enhanced       
   * - node_vmstat_pswpout
     - No corresponding |amazon-cloudwatch| metric. The number of kilobytes the system has swapped out to disk per second (disk
       writes).
     - Kilobytes
     - Enhanced       
   * - rds_exporter_erroneous_requests (Enhanced rds_exporter metric)
     - No corresponding |amazon-cloudwatch| metric. The number of erroneous API
       request made to |amazon-cloudwatch|.
     - Count
     - Enhanced       
   * - rds_exporter_requests_total
     - No corresponding |amazon-cloudwatch| metric. API requests made to
       |amazon-cloudwatch|
     - Count
     - Enhanced       
   * - rds_exporter_scrape_duration_seconds
     - No corresponding |amazon-cloudwatch| metric. The amount of time that this RDS scrape took.
     - Seconds
     - Enhanced       
   * - rds_latency
     - No corresponding |amazon-cloudwatch| metric. The difference between the current time and timestamp in the metric itself.
     - Seconds
     - Enhanced       
   * - rdsosmetrics_General_numVCPUs
     - No corresponding |amazon-cloudwatch| metric. The number of virtual CPUs for the DB instance.
     - Count
     - Enhanced       
   * - rdsosmetrics_General_version 
     - No corresponding |amazon-cloudwatch| metric. The version of the OS metrics stream JSON format.
     - Version number
     - Enhanced       
   * - rdsosmetrics_diskIO_await
     - No corresponding |amazon-cloudwatch| metric. The number of milliseconds required to respond to requests, including queue
       time and service time. This metric is not available for |amazon-aurora|.
     - Milliseconds
     - Enhanced       
   * - rdsosmetrics_diskIO_tps
     - No corresponding |amazon-cloudwatch| metric. The number of I/O transactions per second. This metric is not available for
       |amazon-aurora|.
     - Count per Second
     - Enhanced       
   * - rdsosmetrics_fileSys_maxFiles 
     - No corresponding |amazon-cloudwatch| metric. The maximum number of files that can be created for the file system.
     - Count
     - Enhanced       
   * - rdsosmetrics_fileSys_usedFilePercent 
     - No corresponding |amazon-cloudwatch| metric. The percentage of available files in use.
     - Percentage
     - Enhanced       
   * - rdsosmetrics_loadAverageMinute_fifteen
     - No corresponding |amazon-cloudwatch| metric. The number of processes requesting CPU time over the last 15 minutes.
     - Count
     - Enhanced       
   * - rdsosmetrics_loadAverageMinute_five 
     - No corresponding |amazon-cloudwatch| metric. The number of processes requesting CPU time over the last 5 minutes.
     - Count
     - Enhanced       
   * - rdsosmetrics_memory_hugePagesFree 
     - No corresponding |amazon-cloudwatch| metric. The number of free huge pages. Huge pages are a feature of the Linux kernel.
     - Count
     - Enhanced       
   * - rdsosmetrics_memory_hugePagesRsvd 
     - No corresponding |amazon-cloudwatch| metric. The number of committed huge pages.
     - Count
     - Enhanced       
   * - rdsosmetrics_memory_hugePagesSize 
     - No corresponding |amazon-cloudwatch| metric. The size for each huge pages unit.
     - Count
     - Enhanced       
   * - rdsosmetrics_memory_hugePagesSurp 
     - No corresponding |amazon-cloudwatch| metric. The number of available surplus huge pages over the total.
     - Count
     - Enhanced       
   * - rdsosmetrics_memory_hugePagesTotal
     - No corresponding |amazon-cloudwatch| metric. The total number of huge pages for the system.
     - Count
     - Enhanced       
   * - rdsosmetrics_memory_writeback
     - No corresponding |amazon-cloudwatch| metric. The amount of dirty pages in RAM that are still being written to the
       backing storage.
     - Count
     - Enhanced       
   * - rdsosmetrics_processList_cpuUsedPc
     - No corresponding |amazon-cloudwatch| metric. The percentage of CPU used by the process.
     - Percentage
     - Enhanced       
   * - rdsosmetrics_processList_id
     - No corresponding |amazon-cloudwatch| metric. The identifier of the process.
     - Process ID
     - Enhanced       
   * - rdsosmetrics_processList_parentID
     - No corresponding |amazon-cloudwatch| metric. The process identifier for the parent process of the process.
     - Process ID
     - Enhanced       
   * - rdsosmetrics_processList_rss 
     - No corresponding |amazon-cloudwatch| metric. The amount of RAM allocated to the process
     - Kilobytes
     - Enhanced       
   * - rdsosmetrics_processList_tgid 
     - No corresponding |amazon-cloudwatch| metric. The thread group identifier, which is a number representing the process ID
       to which a thread belongs. This identifier is used to group threads from
       the same process.
     - Identifier
     - Enhanced       
   * - rdsosmetrics_processList_vss
     - No corresponding |amazon-cloudwatch| metric. The amount of virtual memory allocated to the process
     - Kilobytes
     - Enhanced       
   * - rdsosmetrics_swap_cached 
     - No corresponding |amazon-cloudwatch| metric. The amount of swap memory used as cache memory.
     - Kilobytes
     - Enhanced       
   * - rdsosmetrics_tasks_sleeping 
     - No corresponding |amazon-cloudwatch| metric. The number of tasks that are sleeping.
     - Count
     - Enhanced       
   * - rdsosmetrics_tasks_stopped 
     - No corresponding |amazon-cloudwatch| metric. The number of tasks that are stopped.
     - Count
     - Enhanced       
   * - rdsosmetrics_tasks_total
     - No corresponding |amazon-cloudwatch| metric. The total number of tasks.
     - Count
     - Enhanced       
   * - rdsosmetrics_tasks_zombie 
     - No corresponding |amazon-cloudwatch| metric. The number of child tasks that are inactive with an active parent task.
     - Count
     - Enhanced

#+end-block
